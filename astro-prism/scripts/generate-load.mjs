import https from 'https';
import fs from 'fs';

const version = '1.23.0';
const COMPONENTS = `https://raw.githubusercontent.com/PrismJS/prism/v${version}/components.json`;
const outPath = new URL('../../components/prism/preload.mjs', import.meta.url);

const excludes = new Set(['meta']);

function fetch() {
  return new Promise((resolve, reject) => {
    https.get(COMPONENTS, (res) => {
      let data = '';
    
      res.setEncoding('utf-8');
      res.on('data', (d) => {
        data += d;
      });
  
      res.on('end', () => {
        const json = JSON.parse(data);
        resolve(json);
      });
    
    }).on('error', (e) => {
      reject(e);
    });
  });
}

function createModule(languages) {
  return `// This file is generated by astro-prism/scripts/generate-load.mjs
export function loadLanguage(lang) {
${languages.map(lang => `
  if(lang === '${lang}') {
    return import('prismjs/components/prism-${lang}.js');
  }
`).join('')}}`;
}

async function run() {
  const components = await fetch();
  const languages = Object.keys(components.languages).filter(lang => !excludes.has(lang));
  const code = createModule(languages);
  fs.writeFileSync(outPath, code, 'utf-8');
}

run().catch(err => console.error(err));